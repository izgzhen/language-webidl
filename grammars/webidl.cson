scopeName: "source.webidl"
name: "WebIDL"
fileTypes: [
  "idl"
  "webidl"
]
patterns: [
  {
    include: "#comments"
  }
  {
    include: "#numbers"
  }
  {
    match: "\\b(boolean|double|interface|dictionary|const|float|long|short|signed|typedef|unsigned|void|unrestricted|octet|byte)\\b"
    name: "storage.type.webidl"
  }
  {
    match: "\\b(null|true|false|Infinity)\\b"
    name: "constant.language.webidl"
  }
  {
    endCaptures:
      "0":
        name: "punctuation.definition.string.end.webidl"
    beginCaptures:
      "0":
        name: "punctuation.definition.string.begin.webidl"
    begin: "\""
    name: "string.quoted.double.webidl"
    end: "\""
    patterns: [
      {
        include: "#string_escaped_char"
      }
      {
        include: "#string_placeholder"
      }
    ]
  }
  {
    endCaptures:
      "0":
        name: "punctuation.definition.string.end.webidl"
    beginCaptures:
      "0":
        name: "punctuation.definition.string.begin.webidl"
    begin: "'"
    name: "string.quoted.single.webidl"
    end: "'"
    patterns: [
      {
        include: "#string_escaped_char"
      }
    ]
  }
  {
    include: "#function"
  }
]
repository:
  modblock:
    end: "\\]"
    patterns: [
      {
        end: "\\)"
        beginCaptures:
          "1":
            name: "storage.modifier.modblock.key.webidl"
        begin: "([A-Za-z_][A-Za-z0-9_]*+)\\b\\("
        patterns: [
          {
            include: "$base"
          }
        ]
        name: "meta.modblock.webidl"
      }
      {
        match: "[A-Za-z_][A-Za-z0-9_]*+"
        name: "storage.modifier.modblock.key.webidl"
      }
    ]
    begin: "\\["
    name: "meta.modblock.webidl"
  string_escaped_char:
    patterns: [
      {
        match: "\\\\(\\\\|[abefnprtv'\"?]|[0-3]\\d{0,2}|[4-7]\\d?|x[a-fA-F0-9]{0,2}|u[a-fA-F0-9]{0,4}|U[a-fA-F0-9]{0,8})"
        name: "constant.character.escape.webidl"
      }
      {
        match: "\\\\."
        name: "invalid.illegal.unknown-escape.webidl"
      }
    ]

#   access:
#     match: "\\.[a-zA-Z_][a-zA-Z_0-9]*\\b(?!\\s*\\()"
#     name: "variable.other.dot-access.webidl"
#   string_placeholder:
#     patterns: [
#       {
#         match: '''
#           (?x)%
#               						(\\d+\\$)?                             # field (argument #)
#               						[#0\\- +']*                           # flags
#               						[,;:_]?                              # separator character (AltiVec)
#               						((-?\\d+)|\\*(-?\\d+\\$)?)?              # minimum field width
#               						(\\.((-?\\d+)|\\*(-?\\d+\\$)?)?)?         # precision
#               						(hh|h|ll|l|j|t|z|q|L|vh|vl|v|hv|hl)? # length modifier
#               						[diouxXDOUeEfFgGaACcSspn%]           # conversion type

#         '''
#         name: "constant.other.placeholder.webidl"
#       }
#       {
#         match: "%"
#         name: "invalid.illegal.placeholder.webidl"
#       }
#     ]
  parens:
    end: "\\)"
    patterns: [
      {
        include: "$base"
      }
    ]
    begin: "\\("
    name: "meta.parens.webidl"

  function:
    end: "(?<=\\})|(?=#)|(;)"
    beginCaptures:
      "1":
        name: "punctuation.whitespace.function.leading.webidl"
      "3":
        name: "entity.name.function.webidl"
      "4":
        name: "punctuation.definition.parameters.webidl"
    begin: '''
      (?x)
      	  		(?:  ^                                 # begin-of-line
      	  		  |
      	  		     (?: (?= \\s )           (?<!else|new|return) (?<=\\w)      #  or word + space before name
      	  		       | (?= \\s*[A-Za-z_] ) (?<!&&)       (?<=[*&>])   #  or type modifier before name
      	  		     )
      	  		)
      	  		(\\s*) (?!(while|for|do|if|else|switch|catch|enumerate|return|r?iterate)\\s*\\()
      	  		(
      	  			(?: [A-Za-z_][A-Za-z0-9_]*+ | :: )++ |                  # actual name
      	  			(?: (?<=operator) (?: [-*&<>=+!]+ | \\(\\) | \\[\\] ) )  # if it is a C++ operator
      	  		)
      	  		 \\s*(?=\\()
    '''
    patterns: [
      {
        include: "#comments"
      }
      {
        include: "#modblock"
      }
      {
        include: "#parens"
      }
      {
        match: "\\b(const|override)\\b"
        name: "storage.modifier.webidl"
      }
    ]
    name: "meta.function.webidl"

  comments:
    patterns: [
      {
        captures:
          "1":
            name: "meta.toc-list.banner.block.webidl"
        match: "^/\\* =(\\s*.*?)\\s*= \\*/$\\n?"
        name: "comment.block.webidl"
      }
      {
        end: "\\*/"
        captures:
          "0":
            name: "punctuation.definition.comment.webidl"
        begin: "/\\*"
        name: "comment.block.webidl"
      }
      {
        match: "\\*/.*\\n"
        name: "invalid.illegal.stray-comment-end.webidl"
      }
      {
        captures:
          "1":
            name: "meta.toc-list.banner.line.webidl"
        match: "^// =(\\s*.*?)\\s*=\\s*$\\n?"
        name: "comment.line.banner.webidl"
      }
      {
        end: "$\\n?"
        beginCaptures:
          "0":
            name: "punctuation.definition.comment.webidl"
        begin: "//"
        patterns: [
          {
            match: "(?>\\\\\\s*\\n)"
            name: "punctuation.separator.continuation.webidl"
          }
        ]
        name: "comment.line.double-slash.webidl"
      }
    ]
  numbers:
    patterns: [
      {
        match: '\\b((0(x|X)[0-9a-fA-F]*)|(([0-9]+\\.?[0-9]*)|(\\.[0-9]+))((e|E)(\\+|-)?[0-9]+)?)(L|l|UL|ul|u|U|F|f|ll|LL|ull|ULL)?\\b'
        name: 'constant.numeric.webidl'
      }
    ]
